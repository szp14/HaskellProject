
==================== FINAL INTERFACE ====================
2017-01-15 09:15:25.926001 UTC

interface Compiler-0.1.0.0-5UkU68CXfZM1FpQsH03UZ5:Argument 8001
  interface hash: 2b59dcf90f64995dc9bfb7cc54be7da8
  ABI hash: 8634586fa7a04e532eb07c15bde79654
  export-list hash: 17eeeaf66a066bd40401662c8973fd05
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Argument.defMain
  Argument.parseField
  Argument.parseFlag
  Argument.parseInPath
  Argument.parseOption
  Argument.parseOutPath
  Argument.parseRepl
  Argument.parseTreePath
  Argument.Option{Argument.Option funType inPath outPath}
  Argument.Parser
module dependencies: Grammar Interpreter PrettyPrinter Repl
package dependencies: array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43
                      base-4.9.0.0 binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      filepath-1.4.1.0@filepath-1.4.1.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2
                      haskeline-0.7.2.3@haskeline-0.7.2.3 integer-gmp-1.0.0.1
                      integer-logarithms-1@integer-logarithms-1-E6LvTbkhTkGIa6wPB3rtJw
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      scientific-0.3.4.10@scientific-0.3.4.10-2Y658Wts4fDGgAkWhKOJwC
                      terminfo-0.4.0.2@terminfo-0.4.0.2
                      text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
orphans: Compiler-0.1.0.0-5UkU68CXfZM1FpQsH03UZ5:PrettyPrinter
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-4RIYnAHyOmg6Dh17ENWi43:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
import  -/  Grammar c8061553502f022a04564e232ae9b458
  exports: 1350f875d0a40aa853f67f4d5395bf88
import  -/  Interpreter 1d2546acb9d902b0a9307f3b0507bb74
  exports: 7f6578cba9942dbda76ab84dd604c8dd
  interpreter f2f490c31f32e627fb18015b11be183d
import  -/  PrettyPrinter 30a556fbaa847c88a37bb0cf18c65fc8
  exports: 0bcdb367f4debcb6a100b9db829d6460
  prettyPrinter f4c6687b3f86ccff27aeb538e3f784a6
import  -/  Repl c06ed7e748dc71bbb7c4594028a3b06d
  exports: b5798998e8222480db09e9be790e12a4
  repl 2deb1ba25f99634be3e40a1ef348841e
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD 13b7a4e1f414dd38346bde554423bf4b
import  -/  base-4.9.0.0:GHC.IO.Handle.Text 23b6dc4ed000f42bf105ce56bdeb0dc6
import  -/  base-4.9.0.0:GHC.IO.IOMode 9380a6a6b8c50facc225c4877c5e1e90
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 8f3eaf1368a7ea27857993e3febae6a3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State d851912d62cbc95e043a9cc13c3581de
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Class bb09f604e4f3565edc4a2b432f1b5445
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 16a585e7f12cd771300b3cab638df233
0c562a393bfa235bf57fe7e68d4319a0
  $fShowOption :: GHC.Show.Show Argument.Option
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Argument.Option
                  Argument.$fShowOption_$cshowsPrec
                  Argument.$fShowOption_$cshow
                  Argument.$fShowOption_$cshowList -}
0c562a393bfa235bf57fe7e68d4319a0
  $fShowOption1 :: Argument.Option -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Argument.Option) (w1 :: GHC.Base.String) ->
                 case w of ww { Argument.Option ww1 ww2 ww3 ->
                 Argument.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
be7d32d352963ec8933464023d7d4f19
  $fShowOption2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
f5c0e763908d85a1bce3dd04ccdea20b
  $fShowOption3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "funType = "#) -}
951174f4a57073484e5c38b01f37435a
  $fShowOption4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "outPath = "#) -}
dd09051df921f1c417abe6af607d4037
  $fShowOption5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
f9f7159680dc120a65310535794a5f54
  $fShowOption6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "inPath = "#) -}
4739915c1dd05b78ba024ce5d556d400
  $fShowOption7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Option {"#) -}
0c562a393bfa235bf57fe7e68d4319a0
  $fShowOption_$cshow :: Argument.Option -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Argument.Option) ->
                 Argument.$fShowOption_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c562a393bfa235bf57fe7e68d4319a0
  $fShowOption_$cshowList :: [Argument.Option] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Argument.Option
                   Argument.$fShowOption1) -}
0c562a393bfa235bf57fe7e68d4319a0
  $fShowOption_$cshowsPrec ::
    GHC.Types.Int -> Argument.Option -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Argument.Option)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Argument.Option ww3 ww4 ww5 ->
                 Argument.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
03327f21b975d52045de34c552bdd716
  $tc'Option :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11765447871220414796##
                   10371793212483572470##
                   Argument.$trModule
                   Argument.$tc'Option1) -}
163f93a074de3962cdf438d086024aad
  $tc'Option1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Option"#) -}
fe4e987aa86797b39ebd5faa8358c94a
  $tcOption :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12216857271747375159##
                   3938113121392116549##
                   Argument.$trModule
                   Argument.$tcOption1) -}
cbc70d1a43bfa461ffce810d3030fad6
  $tcOption1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Option"#) -}
c9a2aa4838ef19bc96e5f6e1fbbb266a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Argument.$trModule2
                   Argument.$trModule1) -}
52888f241b35b95a97aeedff312c7a6d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Argument"#) -}
fb0e46196007a88518224999cb0cae8e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Compiler-0.1.0.0-5UkU68CXfZM1FpQsH03UZ5"#) -}
a0d741bda9054750f3c2fa69847ec966
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Argument.$fShowOption7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Argument.$fShowOption6
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows8
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Argument.$fShowOption5
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Argument.$fShowOption4
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows8
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Argument.$fShowOption5
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Argument.$fShowOption3
                                                        (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                                         case GHC.Show.$wshowSignedInt
                                                                0#
                                                                ww5
                                                                (GHC.Base.++
                                                                   @ GHC.Types.Char
                                                                   Argument.$fShowOption2
                                                                   x) of ww6 { (#,#) ww7 ww8 ->
                                                         GHC.Types.:
                                                           @ GHC.Types.Char
                                                           ww7
                                                           ww8 } }))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
0c562a393bfa235bf57fe7e68d4319a0
  data Option
    = Option {inPath :: GHC.Base.String,
              outPath :: GHC.Base.String,
              funType :: GHC.Types.Int}
b9bc8c035574099e532cb7e2668f97b7
  type Parser a =
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Types.IO a
609a10e4550fe050d3f25f195594ca57
  defMain :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.defMain1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
33704db7e90a280d2f5280795dc069ed
  defMain1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
996a2b15b527dd965f364649fc7c5a26
  funType :: Argument.Option -> GHC.Types.Int
  RecSel Left Argument.Option
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Argument.Option) ->
                 case ds of wild { Argument.Option ds1 ds2 ds3 -> ds3 }) -}
48b4bce52922764533f872c214a330e6
  inPath :: Argument.Option -> GHC.Base.String
  RecSel Left Argument.Option
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Argument.Option) ->
                 case ds of wild { Argument.Option ds1 ds2 ds3 -> ds1 }) -}
f1264af0f70e207e784f781d803fe175
  outPath :: Argument.Option -> GHC.Base.String
  RecSel Left Argument.Option
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Argument.Option) ->
                 case ds of wild { Argument.Option ds1 ds2 ds3 -> ds2 }) -}
f6e6fa05adad72edf94fde1c1039511d
  parseField :: GHC.Base.String -> Argument.Parser GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (f :: GHC.Base.String) ->
                 let {
                   k :: Control.Monad.Trans.State.Lazy.StateT
                          [GHC.Base.String] GHC.Types.IO GHC.Base.String
                   = case GHC.Base.eqString f Argument.parseField5 of wild {
                       GHC.Types.False
                       -> Argument.parseField4
                            `cast`
                          (Trans
                               (<[GHC.Base.String]>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(GHC.Base.String, [GHC.Base.String])>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <[GHC.Base.String]>_N
                                         <GHC.Types.IO>_R
                                         <GHC.Base.String>_N)))
                       GHC.Types.True
                       -> Argument.parseField3
                            `cast`
                          (Trans
                               (<[GHC.Base.String]>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <([GHC.Types.Char], [GHC.Base.String])>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <[GHC.Base.String]>_N
                                         <GHC.Types.IO>_R
                                         <[GHC.Types.Char]>_N))) }
                 } in
                 let {
                   lvl4 :: [GHC.Types.Char] = GHC.CString.unpackAppendCString# "-"# f
                 } in
                 (\ (s1 :: [GHC.Base.String])
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case s1 of wild {
                    []
                    -> GHC.Prim.raiseIO#
                         @ GHC.Exception.SomeException
                         @ (GHC.Base.String, [GHC.Base.String])
                         Argument.parseField1
                         s
                    : arg args'
                    -> case GHC.Base.eqString arg lvl4 of wild1 {
                         GHC.Types.False
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (GHC.Base.String, [GHC.Base.String])
                              Argument.parseField1
                              s
                         GHC.Types.True
                         -> (k `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                               args')
                              `cast`
                            (GHC.Types.N:IO[0] <(GHC.Base.String, [GHC.Base.String])>_R)
                              s } })
                   `cast`
                 (Trans
                      (<[GHC.Base.String]>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(GHC.Base.String, [GHC.Base.String])>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)))) -}
1014bb0441bc2e82f4db5803f154646b
  parseField1 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Argument.parseField2) -}
1420d8da5e1b013fd9c9771e71f5f6b5
  parseField2 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Base.$fAlternativeIO3
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
345748967751aff3c51c7182af79078a
  parseField3 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([GHC.Types.Char], [GHC.Base.String]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, (GHC.Types.[] @ GHC.Types.Char, eta1) #)) -}
6d4f2e1a1b7d2377bb09b50986406b01
  parseField4 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s1 of wild {
                   []
                   -> GHC.IO.failIO1
                        @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Base.$fAlternativeIO3
                        s
                   : arg args' -> (# s, (arg, args') #) }) -}
e853ec07d75b1ae5d98d1188d7efe1d4
  parseField5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "repl"#) -}
e185ef1c4d494c57090e57f642541bc5
  parseFlag :: GHC.Base.String -> Argument.Parser GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseFlag1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<[GHC.Base.String]>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <(GHC.Base.String, [GHC.Base.String])>_R))
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N))) -}
d7398c3b33a2ebc6318adc3913925269
  parseFlag1 ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: (\ (f :: GHC.Base.String)
                   (eta :: [GHC.Base.String])
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta of wild {
                   []
                   -> GHC.IO.failIO1
                        @ (GHC.Base.String, [GHC.Base.String])
                        GHC.Base.$fAlternativeIO3
                        eta1
                   : arg args'
                   -> case GHC.Base.eqString
                             arg
                             (GHC.CString.unpackAppendCString# "-"# f) of wild1 {
                        GHC.Types.False
                        -> GHC.IO.failIO1
                             @ (GHC.Base.String, [GHC.Base.String])
                             GHC.Base.$fAlternativeIO3
                             eta1
                        GHC.Types.True -> (# eta1, (f, args') #) } }) -}
a3e143e1064bc474c744d651f30f9363
  parseInPath :: Argument.Parser GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseInPath1
                  `cast`
                (Trans
                     (<[GHC.Base.String]>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Base.String, [GHC.Base.String])>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N))) -}
079b84503a83615ad9bdc0c2ab34aa54
  parseInPath1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (s1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s1 of wild {
                   []
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (GHC.Base.String, [GHC.Base.String])
                        Argument.parseField1
                        s
                   : arg args'
                   -> case GHC.Base.eqString arg Argument.parseInPath2 of wild1 {
                        GHC.Types.False
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.String, [GHC.Base.String])
                             Argument.parseField1
                             s
                        GHC.Types.True
                        -> (Argument.parseInPath_k
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                              args')
                             `cast`
                           (GHC.Types.N:IO[0] <(GHC.Base.String, [GHC.Base.String])>_R)
                             s } }) -}
68e9509b4fccdf6861509e85c2365215
  parseInPath2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   Argument.parseInPath_f) -}
2fcc43c6432e902ff49c613ded3ef2b7
  parseInPath_f :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "i"#) -}
24ffe8a0c8e724b4d61af0edb167f5d1
  parseInPath_k ::
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Types.IO GHC.Base.String
  {- Unfolding: (case GHC.Base.eqString
                        Argument.parseInPath_f
                        Argument.parseField5 of wild {
                   GHC.Types.False
                   -> Argument.parseField4
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(GHC.Base.String, [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)))
                   GHC.Types.True
                   -> Argument.parseField3
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <([GHC.Types.Char], [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N
                                     <GHC.Types.IO>_R
                                     <[GHC.Types.Char]>_N))) }) -}
07a5b3c8b2fcbd8bf1f7fa078f7f35e9
  parseOption :: Argument.Parser Argument.Option
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseOption1
                  `cast`
                (Trans
                     (<[GHC.Base.String]>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(Argument.Option, [GHC.Base.String])>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Types.IO>_R <Argument.Option>_N))) -}
7028ff593052b323d84260af84e8540b
  parseOption1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Argument.Option, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
0a117efe1a7ca8ccbc80a7be2d6e9b02
  parseOutPath :: Argument.Parser GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseOutPath1
                  `cast`
                (Trans
                     (<[GHC.Base.String]>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Base.String, [GHC.Base.String])>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N))) -}
e617273e640bc6e5cab1589c0d560ac2
  parseOutPath1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (s1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s1 of wild {
                   []
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (GHC.Base.String, [GHC.Base.String])
                        Argument.parseField1
                        s
                   : arg args'
                   -> case GHC.Base.eqString arg Argument.parseOutPath2 of wild1 {
                        GHC.Types.False
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.String, [GHC.Base.String])
                             Argument.parseField1
                             s
                        GHC.Types.True
                        -> (Argument.parseOutPath_k
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                              args')
                             `cast`
                           (GHC.Types.N:IO[0] <(GHC.Base.String, [GHC.Base.String])>_R)
                             s } }) -}
7853b085dca9fb51afad72ee200af635
  parseOutPath2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   Argument.parseOutPath_f) -}
533614f5582aa30c6143d5e9e9208244
  parseOutPath_f :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "o"#) -}
449e2c60204b6dda73a5deec4a5231d8
  parseOutPath_k ::
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Types.IO GHC.Base.String
  {- Unfolding: (case GHC.Base.eqString
                        Argument.parseOutPath_f
                        Argument.parseField5 of wild {
                   GHC.Types.False
                   -> Argument.parseField4
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(GHC.Base.String, [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)))
                   GHC.Types.True
                   -> Argument.parseField3
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <([GHC.Types.Char], [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N
                                     <GHC.Types.IO>_R
                                     <[GHC.Types.Char]>_N))) }) -}
38c0aeb04d7e60815f290ed2d1cd1d7d
  parseRepl :: Argument.Parser GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseRepl1
                  `cast`
                (Trans
                     (<[GHC.Base.String]>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Base.String, [GHC.Base.String])>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N))) -}
714d383268f84cb907a28fefe0248a01
  parseRepl1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (s1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s1 of wild {
                   []
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (GHC.Base.String, [GHC.Base.String])
                        Argument.parseField1
                        s
                   : arg args'
                   -> case GHC.Base.eqString arg Argument.parseRepl2 of wild1 {
                        GHC.Types.False
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.String, [GHC.Base.String])
                             Argument.parseField1
                             s
                        GHC.Types.True
                        -> (Argument.parseRepl_k
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                              args')
                             `cast`
                           (GHC.Types.N:IO[0] <(GHC.Base.String, [GHC.Base.String])>_R)
                             s } }) -}
f60e00809f2d47c99a701b5169b17335
  parseRepl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   Argument.parseField5) -}
c53c19d6a3074c2fd2159de7e0535030
  parseRepl_k ::
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Types.IO GHC.Base.String
  {- Unfolding: (case GHC.Base.eqString
                        Argument.parseField5
                        Argument.parseField5 of wild {
                   GHC.Types.False
                   -> Argument.parseField4
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(GHC.Base.String, [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)))
                   GHC.Types.True
                   -> Argument.parseField3
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <([GHC.Types.Char], [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N
                                     <GHC.Types.IO>_R
                                     <[GHC.Types.Char]>_N))) }) -}
c19269c572bc28459a8d270dc6051917
  parseTreePath :: Argument.Parser GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Argument.parseTreePath1
                  `cast`
                (Trans
                     (<[GHC.Base.String]>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Base.String, [GHC.Base.String])>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N))) -}
141328b63375518c5cf445086f042dd1
  parseTreePath1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (s1 :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s1 of wild {
                   []
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (GHC.Base.String, [GHC.Base.String])
                        Argument.parseField1
                        s
                   : arg args'
                   -> case GHC.Base.eqString arg Argument.parseTreePath2 of wild1 {
                        GHC.Types.False
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.String, [GHC.Base.String])
                             Argument.parseField1
                             s
                        GHC.Types.True
                        -> (Argument.parseTreePath_k
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                              args')
                             `cast`
                           (GHC.Types.N:IO[0] <(GHC.Base.String, [GHC.Base.String])>_R)
                             s } }) -}
78dcedd933f23ab2ac85fca8d0498b7b
  parseTreePath2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   Argument.parseTreePath_f) -}
9365ae4c608181d9b303fb9a0f8025ff
  parseTreePath_f :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "t"#) -}
bf39bc1e012f8557d3afe878eb23f4f4
  parseTreePath_k ::
    Control.Monad.Trans.State.Lazy.StateT
      [GHC.Base.String] GHC.Types.IO GHC.Base.String
  {- Unfolding: (case GHC.Base.eqString
                        Argument.parseTreePath_f
                        Argument.parseField5 of wild {
                   GHC.Types.False
                   -> Argument.parseField4
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(GHC.Base.String, [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N <GHC.Types.IO>_R <GHC.Base.String>_N)))
                   GHC.Types.True
                   -> Argument.parseField3
                        `cast`
                      (Trans
                           (<[GHC.Base.String]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <([GHC.Types.Char], [GHC.Base.String])>_R))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <[GHC.Base.String]>_N
                                     <GHC.Types.IO>_R
                                     <[GHC.Types.Char]>_N))) }) -}
instance GHC.Show.Show [Argument.Option] = Argument.$fShowOption
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

